---
name: pull-request

on:
  pull_request:
    branches:
      - main

jobs:
  target:
    permissions: write-all
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      BASE_REF: ${{ github.base_ref }}
    steps:
      - name: Get branch for env BRANCH_TAG_NAME
        run: echo "BRANCH_TAG_NAME="$(echo "$GITHUB_HEAD_REF") >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH_TAG_NAME }}
      - uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version: '^1.22'
          cache-dependency-path: "**/*.sum"
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - uses: actions/cache@v4
        with:
          path: ./node_modules
          key: pnpm-${{ github.sha }}-${{ github.ref }}-${{ runner.os }}-
      - name: Show affected apps
        run: |
          bash tools/scripts/print-affected.sh

  lint:
    needs: target
    runs-on: ubuntu-latest
    permissions: write-all
    timeout-minutes: 15

    env:
      BASE_REF: ${{ github.base_ref }}
      TARGET: lint
    steps:
      - name: Get branch for env BRANCH_TAG_NAME
        run: echo "BRANCH_TAG_NAME="$(echo "$GITHUB_HEAD_REF") >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH_TAG_NAME }}
      - uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version: '^1.22'
          cache-dependency-path: "**/*.sum"
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache-npm
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      - uses: actions/cache@v4
        with:
          path: ./node_modules
          key: pnpm-${{ github.sha }}-${{ github.ref }}-${{ runner.os }}-
      - name: Lint
        run: bash tools/scripts/affected.sh

  test:
    needs: target
    runs-on: ubuntu-latest
    permissions: write-all
    timeout-minutes: 15

    env:
      BASE_REF: ${{ github.base_ref }}
      TARGET: test
    steps:
      - name: Get branch for env BRANCH_TAG_NAME
        run: echo "BRANCH_TAG_NAME="$(echo "$GITHUB_HEAD_REF") >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH_TAG_NAME }}
      - uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version: '^1.22'
          cache-dependency-path: "**/*.sum"
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      - uses: actions/cache@v4
        with:
          path: ./node_modules
          key: pnpm-${{ github.sha }}-${{ github.ref }}-${{ runner.os }}-
      - name: Configure Local AWS Credentials
        run: |
          mkdir -p ~/.aws/
          echo -e "[default]\naws_access_key_id = local\naws_secret_access_key = local" > ~/.aws/credentials
          echo -e "[default]\nregion = us-east-1\noutput = json" > ~/.aws/config
      - name: Start DynamoDB Local
        run: docker compose up -d
      - name: Test
        run: bash tools/scripts/affected.sh
        env:
          GORACE: atexit_sleep_ms=0
      - name: Stop DynamoDB Local
        if: always()
        run: docker compose down
